---
- name: Download latest eos snapshot
  get_url:
    url: "{{ nodeos_snapshot_url }}"
    dest: "{{ nodeos_snapshots_dir }}"
    force: "yes"
    owner: "root"
    group: "root"
  register: snapshot_downloading

- name: Extract eos snapshot
  unarchive:
    src: "{{ nodeos_snapshots_dir }}/latest.tar.gz"
    remote_src: "yes"
    dest: "{{ nodeos_snapshots_dir }}"
    owner: "root"
    group: "root"
  when: snapshot_downloading.changed

- name: Start eos nodeos from snapshot
  community.docker.docker_container:
    name: "{{ nodeos_container_name }}"
    image: "{{ nodeos_container_image }}"
    pull: true
    restart_policy: "unless-stopped"
    timeout: 600
    stop_timeout: 600
    state: "started"
    command: "nodeos --config-dir /etc/nodeos --data-dir /opt/nodeos --disable-replay-opts --snapshot /tmp/snapshot.bin"
    networks:
      - name: "{{ nodeos_container_network }}"
    networks_cli_compatible: "yes"
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - "{{ nodeos_config_dir }}:/etc/nodeos:rw"
      - "{{ nodeos_data_dir }}:/opt/nodeos:rw"
      - "{{ nodeos_snapshots_dir }}/snapshot.bin:/tmp/snapshot.bin:rw"
  register: nodeos_bootstrap

- name: Wait for eos nodeos to be ready
  shell: |
    docker logs "{{ nodeos_container_name }}" 2>&1 | grep 'Received block'
  when: nodeos_bootstrap.changed
  register: nodeos_initialized
  until: nodeos_initialized.rc == 0
  retries: 1000
  delay: 10

- name: Remove eos snapshot files
  ansible.builtin.file:
    path: "{{item}}"
    state: absent
  with_items:
    - "{{ nodeos_snapshots_dir}}/latest.tar.gz"
    - "{{ nodeos_snapshots_dir}}/snapshot.bin"
